// Generated by CoffeeScript 1.6.2
(function() {
  var ends_with, path_blocks, socket, update_change, update_css, ws_protocl, ws_url,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  ends_with = function(str, suffix) {
    return str.indexOf(suffix, str.length - suffix.length) !== -1;
  };

  update_change = function(path) {
    var css_exts, ext, parts, _ref;

    if (!path) {
      return;
    }
    parts = path.split(/\./);
    ext = parts[parts.length - 1];
    css_exts = ['css', 'scss', 'sass', 'less'];
    if (__indexOf.call(css_exts, ext) >= 0) {
      return update_css(path);
    } else {
      if ((_ref = document.activeElement.type) === 'textarea' || _ref === 'text') {
        return false;
      }
      if ((typeof no_reload !== "undefined" && no_reload !== null) && no_reload) {
        return false;
      }
      return location.reload();
    }
  };

  update_css = function(path) {
    var href, href_path, link, _i, _len, _ref;

    _ref = document.getElementsByTagName('link');
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      link = _ref[_i];
      href = link.href || '';
      href_path = href.split('?')[0].toLowerCase();
      if (ends_with(href_path, path)) {
        href = href.replace(/[?&]changed=.*?$/, '');
        if (href.indexOf('?') === -1) {
          href = href + '?changed=' + Math.random();
        } else {
          href = href + '&changed=' + Math.random();
        }
        link.href = href;
        break;
      }
    }
    return false;
  };

  if ((typeof WebSocket !== "undefined" && WebSocket !== null) && (typeof JSON !== "undefined" && JSON !== null)) {
    if (document.location.protocol === 'https:') {
      ws_protocl = 'wss:';
    } else {
      ws_protocl = 'ws:';
    }
    ws_url = ws_protocl + 'realtime.farbox.com/notes';
    socket = new WebSocket(ws_url);
    path_blocks = {};
    socket.onmessage = function(message) {
      var note;

      note = JSON.parse(message.data);
      if (path_blocks[note.path]) {
        return false;
      } else {
        path_blocks[note.path] = true;
        update_change(note.path);
        return path_blocks[note.path] = false;
      }
    };
  }

}).call(this);
